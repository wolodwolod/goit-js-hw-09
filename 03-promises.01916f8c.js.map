{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","firstDelayInp","delayStepInp","amountInp","onCreatePromises","e","preventDefault","amountState","Number","value","currentDelay","console","log","delayStep","i","setTimeout","createPromise","then","catch","position","delay","shouldResolve","Math","random","Promise","resolve","reject","addEventListener"],"mappings":";AACA,MAAMA,EAAO,CACTC,KAAMC,SAASC,cAAc,SAC7BC,cAAeF,SAASC,cAAc,uBACtCE,aAAcH,SAASC,cAAc,sBACrCG,UAAWJ,SAASC,cAAc,yBAWtC,SAASI,EAAiBC,GACtBA,EAAEC,iBAOEC,IAAAA,EAAcC,OAAOX,EAAKM,UAAUM,OACpCC,EAAeF,OAAOX,EAAKI,cAAcQ,OAC7CE,QAAQC,IAAIF,GACNG,MAAAA,EAAYL,OAAOX,EAAKK,aAAaO,OAC3CE,QAAQC,IAAIC,GAGP,IAAA,IAAIC,EAAI,EAAGA,GAAKP,EAAaO,GAAK,EACnCJ,GAAgBG,EAEhBF,QAAQC,IAAIE,GACZH,QAAQC,IAAIF,GACZK,WAAW,KAEPC,EAAcF,EAAGJ,GACZO,KAAK,KAAQN,QAAQC,2BAA2BE,QAAQJ,SACxDQ,MAAM,KAAQP,QAAQC,0BAA0BE,QAAQJ,UAC9DA,GAIX,SAASM,EAAcG,EAAUC,GACvBC,MAAAA,EAAgBC,KAAKC,SAAW,GAE/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAGrBL,GACAI,yBAC4BN,QAAeC,OAE/CM,wBAC2BP,QAAeC,SA1ClDvB,EAAKC,KAAK6B,iBAAiB,SAAUvB","file":"03-promises.01916f8c.js","sourceRoot":"../src","sourcesContent":["\nconst refs = {\n    form: document.querySelector('.form'),\n    firstDelayInp: document.querySelector('input[name=\"delay\"]'),\n    delayStepInp: document.querySelector('input[name=\"step\"]'),\n    amountInp: document.querySelector('input[name=\"amount\"]'),\n};\n\n// console.log(refs.delayStepInp);\n// console.log(refs.firstDelayInp);\n// console.log(refs.amountInp);\n// console.log(refs.form);\n\n\nrefs.form.addEventListener('submit', onCreatePromises);\n\nfunction onCreatePromises(e) {\n    e.preventDefault();\n\n    // console.log(refs.delayStepInp.value);\n    // console.log(refs.firstDelayInp.value);\n    // console.log(refs.amountInp.value);\n\n    \n    let amountState = Number(refs.amountInp.value);\n    let currentDelay = Number(refs.firstDelayInp.value);\n    console.log(currentDelay);\n    const delayStep = Number(refs.delayStepInp.value);\n    console.log(delayStep);\n\n\n    for (let i = 1; i <= amountState; i += 1) {\n        currentDelay += delayStep;\n        \n        console.log(i);\n        console.log(currentDelay);\n        setTimeout(() => {\n            \n            createPromise(i, currentDelay)\n                .then(() => { console.log(`✅ Fulfilled promise ${i} in ${currentDelay}ms`) })\n                .catch(() => { console.log(`❌ Rejected promise ${i} in ${currentDelay}ms`) });\n        }, currentDelay)\n    };\n    }\n\nfunction createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n\n    return new Promise((resolve, reject) => {\n\n\n        if (shouldResolve) {\n            resolve\n                (`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }\n        reject\n            (`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\n\n"]}